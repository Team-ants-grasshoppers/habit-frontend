import type { Meta, StoryObj } from '@storybook/react';
import React, { useState } from 'react';
import Modal from '../src/common/components/ui/Modal'; // Í≤ΩÎ°ú ÌôïÏù∏ ÌïÑÏöî
import ProviderWrapper from './ProviderWrapper'; // ‚úÖ Ï∂îÍ∞ÄÎêú Provider
import { useAppSelector, useAppDispatch } from '../src/store/hook';
import { setSelectedItems } from '../src/common/components/ui/hooks/checkboxSelectionSlice';
import { INTERESTS } from '../src/constants/interests';
import { REGIONS } from '../src/constants/regions';

const meta: Meta<typeof Modal> = {
  title: 'Components/Modal',
  component: Modal,
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <ProviderWrapper>
        <Story />
      </ProviderWrapper>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof Modal>;

// ‚úÖ Í≥µÌÜµ ÌÖúÌîåÎ¶ø (onClose Ï∂îÍ∞ÄÎê®)
const Template = (args: any) => {
  const [isOpen, setIsOpen] = useState(true);
  return (
    <Modal
      {...args}
      isOpen={isOpen}
      onCancel={() => {
        alert('‚ùå Ï∑®ÏÜå(Í±∞Ï†à) ÎèôÏûë');
        setIsOpen(false);
      }}
      onClose={() => {
        alert('üõë Îã´Í∏∞(X ÎòêÎäî ESC)');
        setIsOpen(false);
      }}
      onConfirm={(data) => {
        alert(JSON.stringify(data, null, 2));
        setIsOpen(false);
      }}
    />
  );
};

// ‚úÖ Alert Î™®Îìú
export const Alert: Story = {
  render: () => (
    <Template
      mode="alert"
      title="ÏïåÎ¶º"
      description="Ïù¥ ÏûëÏóÖÏùÑ ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
      confirmText="ÌôïÏù∏"
      cancelText="Ï∑®ÏÜå"
    />
  ),
};

// ‚úÖ Checkbox Î™®Îìú with Redux ÏÉÅÌÉú
const CheckboxWrapper = () => {
  const checked = useAppSelector((state) => state.checkboxSelection.selectedItems);
  const dispatch = useAppDispatch();

  return (
    <Template
      mode="checkbox"
      title="Ìï≠Î™© ÏÑ†ÌÉù"
      checkboxItems={['Apple', 'Banana', 'Cherry']}
      checked={checked}
      onCheckedChange={(newChecked: string[]) => dispatch(setSelectedItems(newChecked))}
      confirmText="ÌôïÏù∏"
      cancelText="Îã´Í∏∞"
    />
  );
};
export const Checkbox: Story = {
  render: () => <CheckboxWrapper />,
};

const CheckboxWithInterests = () => {
  const checked = useAppSelector((state) => state.checkboxSelection.selectedItems);
  const dispatch = useAppDispatch();

  return (
    <Template
      mode="checkbox"
      title="Í¥ÄÏã¨ÏÇ¨ ÏÑ†ÌÉù"
      checkboxItems={INTERESTS}
      checked={checked}
      onCheckedChange={(newChecked: string[]) => dispatch(setSelectedItems(newChecked))}
      confirmText="ÌôïÏù∏"
      cancelText="Îã´Í∏∞"
    />
  );
};

const CheckboxWithRegions = () => {
  const checked = useAppSelector((state) => state.checkboxSelection.selectedItems);
  const dispatch = useAppDispatch();

  return (
    <Template
      mode="checkbox"
      title="ÏßÄÏó≠Ïó≠ ÏÑ†ÌÉù"
      checkboxItems={REGIONS}
      checked={checked}
      onCheckedChange={(newChecked: string[]) => dispatch(setSelectedItems(newChecked))}
      confirmText="ÌôïÏù∏"
      cancelText="Îã´Í∏∞"
    />
  );
};

export const CheckboxInterests: Story = {
  render: () => <CheckboxWithInterests />,
};

export const CheckboxRegions: Story = {
  render: () => <CheckboxWithRegions />,
};

// ‚úÖ Input Î™®Îìú
export const Input: Story = {
  render: () => (
    <Template
      mode="input"
      title="Ï†ïÎ≥¥ ÏûÖÎ†•"
      inputFields={[
        { label: 'Ïù¥Î©îÏùº', name: 'email', type: 'email' },
        { label: 'ÎπÑÎ∞ÄÎ≤àÌò∏', name: 'password', type: 'password' },
      ]}
      confirmText="Ï†úÏ∂ú"
      cancelText="Ï∑®ÏÜå"
      errorText="ÏûÖÎ†•Í∞íÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî"
    />
  ),
};
